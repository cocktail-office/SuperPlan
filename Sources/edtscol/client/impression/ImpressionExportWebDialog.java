/*
 * Copyright COCKTAIL (www.cocktail.org), 1995, 2011 This software
 * is governed by the CeCILL license under French law and abiding by the
 * rules of distribution of free software. You can use, modify and/or
 * redistribute the software under the terms of the CeCILL license as
 * circulated by CEA, CNRS and INRIA at the following URL
 * "http://www.cecill.info".
 * As a counterpart to the access to the source code and rights to copy, modify
 * and redistribute granted by the license, users are provided only with a
 * limited warranty and the software's author, the holder of the economic
 * rights, and the successive licensors have only limited liability. In this
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user
 * in light of its specific status of free software, that may mean that it
 * is complicated to manipulate, and that also therefore means that it is
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally,
 * to use and operate it in the same conditions as regards security. The
 * fact that you are presently reading this means that you have had knowledge
 * of the CeCILL license and that you accept its terms.
 */
package edtscol.client.impression;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Frame;
import java.util.ArrayList;

import com.webobjects.eoapplication.EOApplication;

import edtscol.client.MainClient;
import edtscol.client.MainInterface;
import edtscol.client.semainecontroller.IWeekSelectionObserver;
import edtscol.client.semainecontroller.WeekSelector;
import fr.univlr.common.utilities.WindowHandler;

public class ImpressionExportWebDialog extends javax.swing.JDialog implements IWeekSelectionObserver {

	public static final String ON_PROGRESS_NOTIFICATION_METHOD = "onProgressNotification";

	private MainClient app = (MainClient) EOApplication.sharedApplication();

	private MainInterface mainInterface;

	private WeekSelector weekSelector;
	private ArrayList<Integer> listWeeks;

	public ArrayList<Integer> getListWeeks() {
		return listWeeks;
	}

	public void setListWeeks(ArrayList<Integer> listWeeks) {
		this.listWeeks = listWeeks;
	}

	/** Creates new form ImpressionExportWebDialog */
	public ImpressionExportWebDialog(MainInterface mi) {
		super((Frame) WindowHandler.getWindowFromController(mi), "Impression et export web des EDT", true);

		mainInterface = mi;

		initComponents();
		initExtra();
	}

	private void initExtra() {
		listWeeks = new ArrayList<Integer>();
		// weekSelector = new WeekSelector(this,app.getCurrentFannKey());
		weekSelector = new WeekSelector(this, app.getCurrentDisplayedYear());
		weekSelector.setBackground(Color.WHITE);
		panelWeeks.setLayout(new BorderLayout());
		panelWeeks.add(weekSelector, BorderLayout.CENTER);
		checkPDF.setSelected(true);
	}

	public void initWithWeek(Integer weekNumber) {
		ArrayList<Integer> liste = new ArrayList<Integer>();
		liste.add(weekNumber);
		weekSelector.setSelectedWeeks(liste);
		addWeek(weekNumber);
	}

	public boolean addWeek(Integer week) {
		listWeeks.add(week);
		return true;
	}

	public boolean removeWeek(Integer week) {
		listWeeks.remove(week);
		return true;
	}

	public void setEnablePrinting(boolean value) {
		checkPDF.setSelected(value);
		checkPDF.setEnabled(value);
	}

	public void setEnableExporting(boolean value) {
		checkExportWeb.setSelected(value);
		checkExportWeb.setEnabled(value);
	}

	public void setEnableImprimeHoraire(boolean value) {
		checkImpHoraire.setSelected(value);
		checkImpHoraire.setEnabled(value);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
	 * method is always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		checkPDF = new javax.swing.JCheckBox();
		checkExportWeb = new javax.swing.JCheckBox();
		jLabel1 = new javax.swing.JLabel();
		bValider = new javax.swing.JButton();
		bFermer = new javax.swing.JButton();
		panelWeeks = new javax.swing.JPanel();
		labelStatus = new javax.swing.JLabel();
		checkImpHoraire = new javax.swing.JCheckBox();
		checkTab = new javax.swing.JCheckBox();

		setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

		checkPDF.setText("Afficher le PDF (pour imprimer)");
		checkPDF.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				checkPDFActionPerformed(evt);
			}
		});

		checkExportWeb.setText("Exporter l'EDT sur le Web");
		checkExportWeb.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				checkExportWebActionPerformed(evt);
			}
		});

		jLabel1.setBackground(new java.awt.Color(255, 255, 255));
		jLabel1.setText("Sélectionner les semaines à traiter :");
		jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		jLabel1.setOpaque(true);

		bValider.setText("Démarrer");
		bValider.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bValiderActionPerformed(evt);
			}
		});

		bFermer.setText("Fermer");
		bFermer.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bFermerActionPerformed(evt);
			}
		});

		panelWeeks.setMaximumSize(new java.awt.Dimension(290, 170));
		panelWeeks.setOpaque(false);
		panelWeeks.setPreferredSize(new java.awt.Dimension(290, 170));

		org.jdesktop.layout.GroupLayout panelWeeksLayout = new org.jdesktop.layout.GroupLayout(panelWeeks);
		panelWeeks.setLayout(panelWeeksLayout);
		panelWeeksLayout.setHorizontalGroup(panelWeeksLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(0, 290, Short.MAX_VALUE));
		panelWeeksLayout.setVerticalGroup(panelWeeksLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0, 162, Short.MAX_VALUE));

		labelStatus.setBackground(new java.awt.Color(204, 255, 204));
		labelStatus.setText(" ");
		labelStatus.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		labelStatus.setOpaque(true);

		checkImpHoraire.setText("Inclure horaires (début/fin) de chaque créneau");
		checkImpHoraire.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				checkImpHoraireActionPerformed(evt);
			}
		});

		checkTab.setText("Imprimer sous forme de tableau simple");
		checkTab.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				checkTabActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup()
						.addContainerGap()
						.add(layout
								.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
								.add(layout
										.createSequentialGroup()
										.add(layout
												.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(layout
														.createSequentialGroup()
														.add(24, 24, 24)
														.add(panelWeeks, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
												.add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)).addContainerGap())
								.add(layout.createSequentialGroup()
										.add(checkImpHoraire, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE).add(23, 23, 23))
								.add(layout.createSequentialGroup()
										.add(checkExportWeb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE).add(130, 130, 130))
								.add(layout.createSequentialGroup().add(checkPDF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
										.add(130, 130, 130))
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										layout.createSequentialGroup().add(bValider).add(18, 18, 18).add(bFermer).addContainerGap())
								.add(org.jdesktop.layout.GroupLayout.TRAILING,
										layout.createSequentialGroup()
												.add(labelStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
												.addContainerGap())
								.add(layout
										.createSequentialGroup()
										.add(checkTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 294,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()))));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				org.jdesktop.layout.GroupLayout.TRAILING,
				layout.createSequentialGroup().addContainerGap().add(jLabel1).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
						.add(panelWeeks, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
						.add(18, 18, 18).add(checkImpHoraire).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(checkExportWeb)
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(checkPDF)
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(checkTab).add(10, 10, 10).add(labelStatus)
						.addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
						.add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(bFermer).add(bValider)).add(17, 17, 17)));

		pack();
	}// </editor-fold>

	private void checkPDFActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_checkPDFActionPerformed
	}// GEN-LAST:event_checkPDFActionPerformed

	private void checkExportWebActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_checkExportWebActionPerformed
		if (checkExportWeb.isSelected()) {
			checkTab.setSelected(false);
			checkTab.setEnabled(false);
		}
	}// GEN-LAST:event_checkExportWebActionPerformed

	private void bValiderActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bValiderActionPerformed

		if (listWeeks.size() == 0) {
			WindowHandler.showError("Aucune semaine sélectionnée !\n Veuillez sélectionner une ou plusieurs semaines à traiter !");
			return;
		}

		startPrintExport();

		// setVisible(false);

	}// GEN-LAST:event_bValiderActionPerformed

	private void checkTabActionPerformed(java.awt.event.ActionEvent evt) {
	}

	private void checkImpHoraireActionPerformed(java.awt.event.ActionEvent evt) {
	}

	private void startPrintExport() {
		final boolean print = checkPDF.isSelected();
		final boolean export = checkExportWeb.isSelected();
		final boolean impHoraire = checkImpHoraire.isSelected();
		final boolean impTableau = checkTab.isSelected();
		mainInterface.gestionPlanning().printAndExportWebOperations(this, listWeeks, print, export, impHoraire, impTableau);
	}

	public void onProgressNotification(String message) {

		labelStatus.setText(message);
	}

	private void bFermerActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bFermerActionPerformed
		listWeeks.clear();
		setVisible(false);
	}// GEN-LAST:event_bFermerActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton bFermer;
	private javax.swing.JButton bValider;
	private javax.swing.JCheckBox checkExportWeb;
	private javax.swing.JCheckBox checkImpHoraire;
	private javax.swing.JCheckBox checkPDF;
	private javax.swing.JCheckBox checkTab;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel panelWeeks;
	private javax.swing.JLabel labelStatus;
	// End of variables declaration//GEN-END:variables

}
